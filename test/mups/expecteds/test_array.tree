(block (define-variable a (ARRAYLITERAL (INTEGER 1) (INTEGER 2) (INTEGER -10))) (define-variable b (ARRAYLITERAL (INTEGER 100) (INTEGER 300) (INTEGER 500))) (define-variable sum (+ (call-with-names a) (call-with-names b))) (call debug (== (call-with-names sum) (ARRAYLITERAL (INTEGER 101) (INTEGER 302) (INTEGER 490)))) (define-variable diff (- (call a) (call-with-names b))) (call debug (== (call-with-names diff) (ARRAYLITERAL (INTEGER -99) (INTEGER -298) (INTEGER -510)))) (define-variable product (* (call-with-names a) (call-with-names b))) (call debug (== (call-with-names product) (ARRAYLITERAL (INTEGER 100) (INTEGER 600) (INTEGER -5000)))) (define-variable p (* (call-with-names a) (INTEGER 7))) (call debug (== (call-with-names p) (ARRAYLITERAL (INTEGER 7) (INTEGER 14) (INTEGER -70)))) (define-variable p (* (INTEGER 7) (call-with-names a))) (call debug (== (call-with-names p) (ARRAYLITERAL (INTEGER 7) (INTEGER 14) (INTEGER -70)))) (define-variable q (/ (call-with-names b) (call-with-names a))) (call debug (== (call-with-names q) (ARRAYLITERAL (INTEGER 100) (INTEGER 150) (INTEGER -50)))) (define-variable q (/ (ARRAYLITERAL (INTEGER 100) (INTEGER 80) (INTEGER 40) (INTEGER 20)) (INTEGER 20))) (call debug (== (call-with-names q) (ARRAYLITERAL (INTEGER 5) (INTEGER 4) (INTEGER 2) (INTEGER 1)))) (define-variable ns (abs (ARRAYLITERAL (INTEGER -10) (INTEGER 0) (INTEGER 9) (INTEGER -3)))) (call debug (== (call-with-names ns) (ARRAYLITERAL (INTEGER 10) (INTEGER 0) (INTEGER 9) (INTEGER 3)))) (define-variable tfs (not (ARRAYLITERAL (BOOLEAN true) (BOOLEAN false) (BOOLEAN false) (BOOLEAN true) (BOOLEAN false)))) (call debug (== (call-with-names tfs) (ARRAYLITERAL (BOOLEAN false) (BOOLEAN true) (BOOLEAN true) (BOOLEAN false) (BOOLEAN true)))) (define-variable ns (ARRAYLITERAL (INTEGER -5) (INTEGER 0) (INTEGER -10) (INTEGER 8) (INTEGER 3))) (call debug (== (negate (call-with-names ns)) (ARRAYLITERAL (INTEGER 5) (INTEGER 0) (INTEGER 10) (INTEGER -8) (INTEGER -3)))) (define-variable t1 (ARRAYLITERAL (BOOLEAN true) (BOOLEAN true) (BOOLEAN false) (BOOLEAN false))) (define-variable t2 (ARRAYLITERAL (BOOLEAN true) (BOOLEAN false) (BOOLEAN true) (BOOLEAN false))) (call debug (== (and (call-with-names t1) (call-with-names t2)) (ARRAYLITERAL (BOOLEAN true) (BOOLEAN false) (BOOLEAN false) (BOOLEAN false)))) (call debug (== (or (call-with-names t1) (call-with-names t2)) (ARRAYLITERAL (BOOLEAN true) (BOOLEAN true) (BOOLEAN true) (BOOLEAN false)))) (define-variable a (ARRAYLITERAL (INTEGER 90) (INTEGER -10) (INTEGER 100) (INTEGER 110) (INTEGER 1000))) (call debug (== (< (call-with-names a) (INTEGER 100)) (ARRAYLITERAL (BOOLEAN true) (BOOLEAN true) (BOOLEAN false) (BOOLEAN false) (BOOLEAN false)))) (define-variable a (ARRAYLITERAL (INTEGER 1) (INTEGER 2) (INTEGER 3))) (define-variable q (// (call-with-names a) (INTEGER 2))) (call debug (call all (< (abs (- (call q) (ARRAYLITERAL (REAL 0.5) (REAL 1) (REAL 1.5)))) (REAL 0.001)))) (define-variable a (ARRAYLITERAL (INTEGER 0) (INTEGER 1) (INTEGER 2) (INTEGER 3) (INTEGER 4) (INTEGER 5) (INTEGER 6) (INTEGER 7))) (define-variable r (% (call-with-names a) (INTEGER 3))) (call debug (== (call-with-names r) (ARRAYLITERAL (INTEGER 0) (INTEGER 1) (INTEGER 2) (INTEGER 0) (INTEGER 1) (INTEGER 2) (INTEGER 0) (INTEGER 1)))) (define-variable a (ARRAYLITERAL (INTEGER 10) (INTEGER 20) (INTEGER 24) (INTEGER 19) (INTEGER 15))) (define-variable b (ARRAYLITERAL (INTEGER 3) (INTEGER 2) (INTEGER 7) (INTEGER 10) (INTEGER 9))) (define-variable r (% (call-with-names a) (call-with-names b))) (call debug (== (call-with-names r) (ARRAYLITERAL (INTEGER 1) (INTEGER 0) (INTEGER 3) (INTEGER 9) (INTEGER 6)))) (define-variable a (ARRAYLITERAL (INTEGER 1) (INTEGER 2) (INTEGER 3))) (define-variable b (ARRAYLITERAL (INTEGER 8) (INTEGER 6) (INTEGER 2))) (define-variable p (^ (call-with-names a) (call-with-names b))) (call debug (== (call-with-names p) (ARRAYLITERAL (INTEGER 1) (INTEGER 64) (INTEGER 9)))) (define-variable x (ARRAYLITERAL (INTEGER 1000) (INTEGER 64) (INTEGER 81))) (define-variable base (ARRAYLITERAL (INTEGER 10) (INTEGER 2) (INTEGER 3))) (define-variable l (call log (call-with-names base) (call-with-names x))) (call debug (call all (< (abs (- (call l) (ARRAYLITERAL (INTEGER 3) (INTEGER 6) (INTEGER 4)))) (REAL 0.001)))) (call debug (call all (ARRAYLITERAL (BOOLEAN true) (BOOLEAN true) (BOOLEAN true)))) (call debug (call all (ARRAYLITERAL (BOOLEAN true)))) (call debug (not (call all (ARRAYLITERAL (BOOLEAN false))))) (call debug (not (call all (ARRAYLITERAL (BOOLEAN false) (BOOLEAN true) (BOOLEAN true))))) (call debug (not (call all (ARRAYLITERAL (BOOLEAN false) (BOOLEAN false))))) (call debug (call any (ARRAYLITERAL (BOOLEAN true)))) (call debug (call any (ARRAYLITERAL (BOOLEAN true) (BOOLEAN true) (BOOLEAN true) (BOOLEAN true)))) (call debug (call any (ARRAYLITERAL (BOOLEAN false) (BOOLEAN false) (BOOLEAN false) (BOOLEAN true)))) (call debug (call any (ARRAYLITERAL (BOOLEAN false) (BOOLEAN false) (BOOLEAN true) (BOOLEAN false)))) (call debug (not (call any (ARRAYLITERAL (BOOLEAN false) (BOOLEAN false) (BOOLEAN false) (BOOLEAN false) (BOOLEAN false))))) (call debug (== (< (ARRAYLITERAL (INTEGER 10) (INTEGER 17) (INTEGER -45)) (ARRAYLITERAL (INTEGER 10) (INTEGER 16) (INTEGER -44))) (ARRAYLITERAL (BOOLEAN false) (BOOLEAN false) (BOOLEAN true)))) (call debug (== (<= (ARRAYLITERAL (INTEGER 10) (INTEGER 17) (INTEGER -45)) (ARRAYLITERAL (INTEGER 10) (INTEGER 16) (INTEGER -44))) (ARRAYLITERAL (BOOLEAN true) (BOOLEAN false) (BOOLEAN true)))) (call debug (== (ARRAYLITERAL (INTEGER 3) (INTEGER 3)) (ARRAYLITERAL (INTEGER 3) (INTEGER 3)))) (call debug (!= (ARRAYLITERAL (INTEGER 3) (INTEGER 4)) (ARRAYLITERAL (INTEGER 4) (INTEGER 3)))) (call debug (== (> (ARRAYLITERAL (INTEGER 10) (INTEGER 17) (INTEGER -45)) (ARRAYLITERAL (INTEGER 10) (INTEGER 16) (INTEGER -44))) (ARRAYLITERAL (BOOLEAN false) (BOOLEAN true) (BOOLEAN false)))) (call debug (== (>= (ARRAYLITERAL (INTEGER 10) (INTEGER 17) (INTEGER -45)) (ARRAYLITERAL (INTEGER 10) (INTEGER 16) (INTEGER -44))) (ARRAYLITERAL (BOOLEAN true) (BOOLEAN true) (BOOLEAN false)))))
