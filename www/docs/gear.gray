[let skin=madeupdocs]
[let root=.]
[style id=screenshot
width: 75%
background-color: white
margin-top: 0.5em
margin-bottom: 0.5em
margin-left: auto
margin-right: auto
display: block
]

# Gear

Our goal today is to model an object that makes the world go 'round: a gear. Gears look like this:

[image src=docs/html/images/gear/geareg.png style=screenshot]

We could try to model this with a series of `move`s and `yaw`s, but there's an easier way to create shapes that have circular profiles. But we must leave the xy-coordinate system. Instead, we will work with the polar coordinate system, which looks like this:

[image src=docs/html/images/gear/polargrid.png style=screenshot]

Each spoke of this circular grid is labeled with an angle. The spokes meet at the center and lead outward through a bunch of circles---each with a bigger radius. We say the center point has radius 0, the smallest circle has radius 1, the next has radius 2, and so on.

[hide title="What's the radius of the largest circle?"
There are 10 circles, so the outermost circle has radius 10.
]

## Finding the Vertices

Before we dive into modeling on the computer, let's draw the gear on paper.

To trace out the toothy perimeter of a gear, we're going to visit certain places where the spokes intersect the circles. We'll identify these locations with their radius and angle.

Start by placing at a dot at each of those locations:

1. Mark where the circle of radius 7 intersects the spoke of 0 degrees.
1. Mark where radius 10 intersects 10 degrees.
1. Mark where radius 10 intersects 20 degrees.
1. Mark where radius 7 intersects 30 degrees.

You've just marked the vertices of the first tooth of the gear! Draw straight line segments connecting each vertex to the next.

Now let's draw the second tooth:

1. Mark radius 7, degrees 40.
1. Mark radius 10, degrees 50.
1. Mark radius 10, degrees 60.
1. Mark radius 7, degrees 70.

And the third:

1. Mark radius 7, degrees 80.
1. Mark radius 10, degrees 90.
1. Mark radius 10, degrees 100.
1. Mark radius 7, degrees 110.

Go ahead and mark up the rest of the vertices, following the exact same pattern.

## Polarto

Now that we have our vertices identified, let's visit them in Madeup. When we know the xy-coordinates of our vertices, we use `moveto`. We don't know x and y for these vertices, but we do know their radius and degrees. Instead of `moveto`, we use the `polarto` command:

[mup
polarto 7, 0
]

Use this command to visit each of your vertices that you marked in the previous step.

If you think visiting each one is too much work, read on to learn about how to use a loop. If you don't think it's too much work, that's fine too. Just skip down to the Extrude section once you've completed the perimeter.

## For Loops

Notice how each tooth is plotted very similarly. Suppose the starting spoke is `d` degrees. Then the tooth is plotted like this:

[mup
polarto 7, d
polarto 10, d + 10
polarto 10, d + 20
polarto 7, d + 30
]

This code works for each tooth, no matter where we are on the gear. The only thing we need to change for each tooth is `d`. For the first tooth, `d` is 0. For the second tooth, it's 40. For the third, it's 80. For the fourth, it's 120. And so on. We can march through a sequence like this using a `for` loop:

[mup
for d to 360 by 40
  -- insert repeated code here
end
]

Nest the code to plot each tooth inside this loop. Be sure to use the `for` loop with `to` and `by`.

If you are using blocks, you'll need to create the variable `d`. Visit the Variables menu and click *Create variable...*. Then `d` will show up in the list of variables.

## Extrude

Once your perimeter is traced, extrude it along the z-axis. Here we extrude it 3 units:

[mup
extrude 0, 0, 1, 3
]

## Hole

Gears often have a hole in their center. Maybe we should too? Let's start by putting a dowel through the center. Add this code after you extrude:

[mup
.radius = 2
nsides = 20
moveto 0, 0, -10
moveto 0, 0, 10
dowel
]

You might need to adjust your numbers. Make sure the dowel passes through your gear completely. Once it does, insert the `subtract` command before `dowel` to carve the dowel away:

[mup
subtract
dowel
]
